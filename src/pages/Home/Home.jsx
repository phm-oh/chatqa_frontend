import React, { useState, useEffect } from 'react';
import './Home.css'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å module ‡πÄ‡∏õ‡πá‡∏ô CSS ‡∏õ‡∏Å‡∏ï‡∏¥
import QuestionForm from '../../components/forms/QuestionForm/QuestionForm';
import Loading, { LoadingCard } from '../../components/common/Loading/Loading';
import { faqAPI, questionAPI } from '../../services/api'; 
import { errorUtils, stringUtils, dateUtils } from '../../utils/helpers';
import { TOAST_TYPES } from '../../utils/constants';

const Home = ({ showToast, navigateTo, isOnline, apiStatus }) => {
  const [popularFAQs, setPopularFAQs] = useState([]);
  const [isLoadingFAQs, setIsLoadingFAQs] = useState(true);
  const [LoadingStats ,setIsLoadingStats] =useState(true);
  const [stats, setStats] = useState({
    totalQuestions: 0,
    avgResponseTime: '12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
    satisfactionRate: '86%'
  });

  // Load popular FAQs
  useEffect(() => {
    loadPopularFAQs();
    loadStats();
  }, []);

  const loadPopularFAQs = async () => {
    if (!isOnline || apiStatus !== 'healthy') {
      setIsLoadingFAQs(false);
      return;
    }

    try {
      setIsLoadingFAQs(true);
      const response = await faqAPI.getPopular();
      
      if (response.success) {
        setPopularFAQs(response.data.slice(0, 5)); // Show only 5
      }
    } catch (error) {
      const errorMessage = errorUtils.parseError(error);
      showToast(errorMessage, TOAST_TYPES.ERROR);
    } finally {
      setIsLoadingFAQs(false);
    }
  };

    const loadStats = async () => {
    if (!isOnline || apiStatus !== 'healthy') {
      setIsLoadingStats(false);
      return;
    }

    try {
      setIsLoadingStats(true);
      const response = await questionAPI.getStats();
      
      if (response.success) {
        setStats(prev => ({
          ...prev,
          totalQuestions: response.data.overview.published // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ published ‡∏à‡∏≤‡∏Å API
        }));
      }
    } catch (error) {
      const errorMessage = errorUtils.parseError(error);
      showToast(errorMessage, TOAST_TYPES.ERROR);
    } finally {
      setIsLoadingStats(false);
    }
  };

  const handleQuestionSuccess = () => {
    // Optionally refresh stats or do something after successful submission
    loadStats();
  };

  const renderPopularFAQs = () => {
    if (isLoadingFAQs) {
      return (
        <div className="faq-loading">
          {Array.from({ length: 3 }, (_, i) => (
            <LoadingCard key={i} height="120px" showImage={false} lines={2} />
          ))}
        </div>
      );
    }

    if (!popularFAQs.length) {
      return (
        <div className="no-faqs">
          <p>ü§î ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ FAQ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢</p>
          <button 
            className="btn btn-primary btn-sm"
            onClick={() => navigateTo('faq')}
          >
            ‡∏î‡∏π‡∏Ñ‡∏•‡∏±‡∏á FAQ
          </button>
        </div>
      );
    }

    return popularFAQs.map((faq, index) => (
      <div key={faq._id} className="faq-item">
        <div className="faq-number">#{index + 1}</div>
        <div className="faq-content">
          <h4 className="faq-question">
            {stringUtils.truncate(faq.question, 80)}
          </h4>
          <p className="faq-answer">
            {stringUtils.truncate(faq.answer, 120)}
          </p>
          <div className="faq-meta">
            <span className="faq-category">{faq.category}</span>
            <span className="faq-date">{dateUtils.getRelativeTime(faq.dateAnswered)}</span>
          </div>
        </div>
      </div>
    ));
  };

  return (
    <div className="home-page">
      {/* Hero Section */}
      <section className="hero-section">
        <div className="container">
          <div className="hero-content">
            <div className="hero-text">
              <h1 className="hero-title">
                üéì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
                <br />
                <span className="hero-highlight">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤</span>
              </h1>
              <p className="hero-description">
                ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡πÉ‡∏ô
                ‡∏Ñ‡∏•‡∏±‡∏á FAQ 
              </p>
              
              <div className="hero-stats">
                <div className="stat-item">
                  <div className="stat-number">{stats.totalQuestions}+</div>
                  <div className="stat-label">‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</div>
                </div>
                <div className="stat-item">
                  <div className="stat-number">{stats.avgResponseTime}</div>
                  <div className="stat-label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</div>
                </div>
                {/* <div className="stat-item">
                  <div className="stat-number">{stats.satisfactionRate}</div>
                  <div className="stat-label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</div>
                </div> */}
              </div>

              <div className="hero-actions">
                <button 
                  className="btn btn-primary btn-lg"
                  onClick={() => document.getElementById('question-form')?.scrollIntoView({ behavior: 'smooth' })}
                >
                  üìù ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏¢
                </button>
                <button 
                  className="btn btn-secondary btn-lg"
                  onClick={() => navigateTo('faq')}
                >
                  ‚ùì ‡∏î‡∏π‡∏Ñ‡∏•‡∏±‡∏á FAQ
                </button>
              </div>
            </div>

            <div className="hero-image">
              <div className="hero-illustration">
                <div className="illustration-bubble bubble-1">üí¨</div>
                <div className="illustration-bubble bubble-2">ü§î</div>
                <div className="illustration-bubble bubble-3">üí°</div>
                <div className="illustration-main">
                  <div className="illustration-icon">üéì</div>
                  <div className="illustration-text">24/7</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="features-section">
        <div className="container">
          <h2 className="section-title">üéì ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</h2>
          
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">‚ö°</div>
              <h3>‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏±‡∏ô‡πÉ‡∏à</h3>
              <p>‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á Email</p>
            </div>

            <div className="feature-card">
              <div className="feature-icon">üìö</div>
              <h3>‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ</h3>
              <p>FAQ ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß</p>
            </div>

            <div className="feature-card">
              <div className="feature-icon">üë®‚Äçüè´</div>
              <h3>‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</h3>
              <p>‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</p>
            </div>

            <div className="feature-card">
              <div className="feature-icon">üåê</div>
              <h3>‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏á‡πà‡∏≤‡∏¢</h3>
              <p>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏•‡πá‡∏ï ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå</p>
            </div>
          </div>
        </div>
      </section>

      {/* Popular FAQ Section */}
      <section className="popular-faq-section">
        <div className="container">
          <div className="section-header">
            <h2 className="section-title">üî• FAQ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢</h2>
            <button 
              className="btn btn-primary"
              onClick={() => navigateTo('faq')}
            >
              ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
          </div>

          <div className="popular-faqs">
            {renderPopularFAQs()}
          </div>
        </div>
      </section>

      {/* Question Form Section */}
      <section className="form-section" id="question-form">
        <div className="container-sm">
          <QuestionForm 
            showToast={showToast}
            onSuccess={handleQuestionSuccess}
          />
        </div>
      </section>
    </div>
  );
};

export default Home;